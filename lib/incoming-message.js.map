{"version":3,"sources":["../src/incoming-message.ts"],"names":[],"mappings":"8HAAA;AACA;;AAEA,kE;;;;;;;;;;;;;;;;AAgBO,MAAM,eAAN,SAA8B,cAAK,eAAnC,CAAmD;;;;;AAKxD,EAAA,WAAW;AACT,EAAA,MADS;;;AAIT,EAAA,CAJS;AAKT,EAAA,GALS;AAMT;AACA,UAAM,MAAN,EADA;AAEA,SAAK,gBAAL,GAAwB,CAAxB;AACA,SAAK,gBAAL,GAAwB,CAAxB;AACA,SAAK,WAAL,GAAmB,KAAnB;AACA,SAAK,eAAL,GAAuB,KAAvB;AACA,SAAK,cAAL,GAAsB;AACpB,2BAAqB,IADD,EAAtB;;;AAIA,QAAI,eAAe,GAAG,yBAAE,SAAF,CAAY,CAAC,CAAC,qBAAd,EAAqC,EAArC,CAAtB;AACA,QAAI,KAAK,GAAG,qBAAY,SAAZ,CAAsB,eAAtB,CAAZ;AACA,IAAA,KAAK,GAAG,KAAK,CAAC,MAAN,GAAe,CAAf,GAAoB,IAAG,KAAM,EAA7B,GAAiC,KAAzC;AACA,SAAK,MAAL,GAAc,CAAC,CAAC,UAAhB;AACA,SAAK,GAAL,GAAY,GAAE,CAAC,CAAC,IAAK,GAAE,KAAM,EAA7B;AACA,SAAK,OAAL,GAAe,yBAAE,SAAF,CAAY,CAAC,CAAC,OAAd,CAAf;AACA,SAAK,OAAL,GAAe,yBAAE,OAAF,CAAU,KAAK,OAAf,EAAwB,UAAS,MAAT,EAAiB,GAAjB,EAAsB;AAC3D,aAAO,yBAAE,OAAF,CAAU,GAAV,CAAP;AACD,KAFc,CAAf;AAGA,SAAK,OAAL,CAAa,gBAAb,IAAiC,yBAAE,QAAF,CAAW,yBAAE,SAAF,CAAY,CAAC,CAAC,IAAd,EAAoB,EAApB,EAAwB,MAAnC,CAAjC;AACA;AACA,SAAK,IAAL,GAAY,CAAC,CAAC,eAAF,GAAoB,MAAM,CAAC,IAAP,CAAY,CAAC,CAAC,IAAd,EAAoB,QAApB,CAApB,GAAoD,CAAC,CAAC,IAAlE;AACA,SAAK,GAAL,GAAW,GAAX;AACD,GAlCuD,C;;;AAqC3C,e","file":"incoming-message.js","sourcesContent":["import _ from 'lodash-firecloud';\nimport http from 'http';\nimport net from 'net';\nimport querystring from 'querystring';\n\nimport {\n  Context,\n  Event\n} from './types';\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    chunkedEncoding: boolean;\n    _removedHeader: {\n      [key: string]: boolean;\n    };\n  }\n}\n\nexport class IncomingMessage extends http.IncomingMessage {\n  body: string | Buffer;\n\n  ctx: Context;\n\n  constructor(\n    socket: {\n      destroy: (err?: Error) => void;\n    },\n    e: Event,\n    ctx: Context\n  ) {\n    super(socket as net.Socket);\n    this.httpVersionMajor = 1;\n    this.httpVersionMinor = 1;\n    this.httpVersion = '1.1';\n    this.chunkedEncoding = false;\n    this._removedHeader = {\n      'transfer-encoding': true\n    };\n\n    let queryParameters = _.defaultTo(e.queryStringParameters, {});\n    let query = querystring.stringify(queryParameters);\n    query = query.length > 0 ? `?${query}` : query;\n    this.method = e.httpMethod;\n    this.url = `${e.path}${query}`;\n    this.headers = _.cloneDeep(e.headers);\n    this.headers = _.mapKeys(this.headers, function(_value, key) {\n      return _.toLower(key);\n    });\n    this.headers['content-length'] = _.toString(_.defaultTo(e.body, '').length);\n    // see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html\n    this.body = e.isBase64Encoded ? Buffer.from(e.body, 'base64') : e.body;\n    this.ctx = ctx;\n  }\n}\n\nexport default IncomingMessage;\n"]}