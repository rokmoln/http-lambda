{"version":3,"sources":["../src/server-response.ts"],"names":[],"mappings":"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","file":"server-response.js","sourcesContent":["import IncomingMessage from './incoming-message';\nimport _ from 'lodash-firecloud';\nimport http from 'http';\n\nimport {\n  Context,\n  Next\n} from './types';\n\ndeclare module 'http' {\n  interface OutgoingMessage {\n    end(data?: any, encoding?, cb?: () => void): void;\n  }\n\n  interface ServerResponse {\n    _header: string;\n    _headers: {\n      [key: string]: string | string[];\n    };\n  }\n}\n\ntype WriteRawCallback = (err?: Error) => void;\n\nexport class ServerResponse extends http.ServerResponse {\n  _next: Next;\n\n  _body: Buffer;\n\n  _isBinary: boolean;\n\n  ctx: Context;\n\n  // eslint-disable-next-line max-params\n  constructor(req: IncomingMessage, ctx: Context, next: Next) {\n    super(req);\n    this._body = Buffer.from('');\n\n    this.ctx = ctx;\n    this._next = next;\n    this._isBinary = false;\n\n    // NOTE express sets the __proto__ to http.ServerResponse\n    _.forEach([\n      '_writeRaw',\n      'addTrailers',\n      'end',\n      'writeHead'\n    ], (method) => {\n      // @ts-ignore\n      // eslint-disable-next-line no-proto\n      this[method] = this.__proto__[method].bind(this);\n    });\n  }\n\n  /* eslint-disable no-dupe-class-members */\n  _writeRaw(data: Buffer, _callback?: WriteRawCallback): void;\n\n  _writeRaw(data: Buffer, encoding: string, _callback?: WriteRawCallback): void;\n\n  _writeRaw(data: Buffer, encodingOrCallback: string | WriteRawCallback, _callback?: WriteRawCallback): void {\n    let encoding;\n    if (_.isFunction(encodingOrCallback)) {\n      _callback = encodingOrCallback;\n      encoding = undefined;\n    } else {\n      encoding = encodingOrCallback;\n    }\n\n    // see https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings\n    if (encoding === 'binary') {\n      this._isBinary = true;\n    }\n\n    if (_.isBuffer(data)) {\n      this._body = Buffer.concat([\n        this._body,\n        data\n      ]);\n    } else if (_.isString(data)) {\n      this._body = Buffer.concat([\n        this._body,\n        Buffer.from(data, encoding)\n      ]);\n    } else {\n      throw new Error('ServerResponse._writeRaw expects Buffer or string');\n    }\n  }\n  /* eslint-enable no-dupe-class-members */\n\n  // eslint-disable-next-line class-methods-use-this\n  addTrailers(_headers: http.OutgoingHttpHeaders | [string, string][]): void {\n    // not supported\n  }\n\n  end(data?: any, encoding?: any, _cb?: () => void): void {\n    super.end(data, encoding);\n\n    // API Gateway doesn't support multiple headers (yet)\n    // case #1951724541\n    let headers = _.mapValues(this._headers, function(header) {\n      // NOTE this is a very na√Øve \"solution\" since the semantics are header based,\n      // while here we assume that all the values of a header MUST be joined by a comma\n      if (_.isArray(header)) {\n        header = header.join(', ');\n      }\n\n      return _.toString(header);\n    });\n\n    let body = this._body.toString(this._isBinary ? 'base64' : undefined);\n    // FIXME\n    // body = this._contentLength ? body : undefined;\n\n    this._next(undefined, {\n      // see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html\n      isBase64Encoded: this._isBinary,\n      statusCode: this.statusCode,\n      // API Gateway doesn't support statusMessage (yet)\n      // statusMessage: this.statusMessage || http.STATUS_CODES[this.statusCode],\n      headers,\n      body\n    });\n  }\n\n  writeHead(\n    statusCode: number,\n    reasonPhrase?: string | http.OutgoingHttpHeaders,\n    headers?: http.OutgoingHttpHeaders\n  ): this {\n    if (_.isString(reasonPhrase)) {\n      super.writeHead(statusCode, reasonPhrase, headers);\n    } else {\n      headers = reasonPhrase;\n      super.writeHead(statusCode, headers);\n    }\n\n    // we want this._body to be just the body on this.end\n    this._header = '';\n    return this;\n  }\n}\n\nexport default ServerResponse;\n"]}